<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Manager</title>
    <link rel="stylesheet" href="/public/styles/home.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
    <header class="top-header">
        <h1>Manager</h1>
        <form id="login-form">
            <input type="password" name="login" id="login" placeholder="Enter the admin password">
            <button class="button outline-primary-button">Verify</button>
        </form>
    </header>
    
    <main>
        <div class="top-projects-info-container">
            <h2>List of Projects</h2>
            <button class="add-project-button button outline-secondary-button">Add Project</button>
        </div>
        <div class="projects-container">
            <% for(const project of projects) { %>
            <article id="<%= project.id%>" class="project-card">
                <div class="project-type-container">
                    <h6 class="project-type"><%= project.type %></h6>
                    <button class="project-button project-delete">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon">
                            <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                          </svg>
                          
                    </button>
                </div>
               <div class="project-info-container">
                    <h3 class="project-name"><%= project.name %></h3>
                    <p class="project-description"><%= project.description %></p>
               </div>
                <div class="project-state-container">
                    <div class="project-state-info-container">
                        <p class="project-state-label">
                            <%= project.stateLabel %>
                        </p>
                        <p class="project-state-counter">
                            <% if(project.state < 4) { %>
                                <%= project.state %>/3
                            <% } %> 
                        </p>
                    </div>
                    <div class="project-states-container">
                        <% if(project.state === 4) { %>
                            <div class="project-state project-state-4"></div>
                            <div class="project-state project-state-4"></div>
                            <div class="project-state project-state-4"></div>
                        <% } else {%>
                            <% for(let i = 1; i <= 3; i++) { %>
                                <%if(i <= project.state) { %>
                                    <div class="project-state project-state-<%= i %>"></div>
                                <% } else { %>
                                    <div class="project-state"></div>
                                <% } %>
                            <% } %>
                        <% } %>
                    </div>
                </div>
                <div class="project-button-container">
                    <button class="button outline-primary-button project-edit-button">Edit</button>
                    <div class="project-edit-state-container">
                        <% if(project.state < 4) { %>
                            <button class="project-button project-preview-state">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18" />
                                </svg>
                                  
                            </button>
                            <button class="project-button project-next-state">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" />
                              </svg>
                              </button>
                        <% } %>
                    </div>
                </div>
            </article>
            <% } %>
            <div class="project-hidden"></div>
            <div class="project-hidden"></div>
        </div>
    </main>
   <div class="modal-background-opacity hidden">
        <div class="modal-container">
            <div class="modal-header">
                <h3 class="modal-title">Add Project</h3>
                <button class="modal-close-button project-button">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <form class="modal-form">
                <label for="project-name">Name</label>
                <input type="text" id="project-name" name="project-name" placeholder="E-commerce">
                <label for="project-type">Type</label>
                <input type="text" id="project-type" name="project-type" placeholder="Web">
                <label for="project-description">Description</label>
                <textarea id="project-description" name="project-description" placeholder="Digital store selling perfumes for men" ></textarea>
 
            </form>

        </div>
   </div>
   <article id="error-container" class="hidden">
        <span>Error: </span>
        <span id="error-message">Example</span>
        <span id="error-status">(400)</span>
   </article>
   <script>
        const addProjectButton = document.querySelector(".add-project-button");
        const modalBackground = document.querySelector(".modal-background-opacity");
        const nameProjectInput = document.querySelector("#project-name");
        const descriptionProjectInput = document.querySelector("#project-description");
        const typeProjectInput = document.querySelector("#project-type");
        const addProjectSubmit = document.querySelector("#add-project-submit");
        const editProjectSubmit = document.querySelector("#edit-project-submit");

        const loginForm = document.querySelector("#login-form");

        let projectToEdit;

        function createError(message, status) {
            const errorContainer = document.querySelector("#error-container");
            const errorMessage = document.querySelector("#error-message");
            const errorStatus = document.querySelector("#error-status");
            errorMessage.textContent = message;
            errorStatus.textContent = `(${status})`;
            errorContainer.classList.remove("hidden");
            setTimeout(() => {
                errorContainer.classList.add("hidden");
            }, 5000)
        }

        function removeModalButtons() {
            const addProjectSubmit = document.querySelector("#add-project-submit");
            if(addProjectSubmit) addProjectSubmit.remove();
            const editProjectSubmit = document.querySelector("#edit-project-submit");
            if(editProjectSubmit) editProjectSubmit.remove();
        }

        function createAddProjectSubmit() {
            const addProjectSubmit = document.createElement("button");
            addProjectSubmit.classList.add("button", "outline-secondary-button");
            addProjectSubmit.textContent = "Add project to list";
            addProjectSubmit.type = "submit";
            addProjectSubmit.id = "add-project-submit";
            modalBackground.querySelector(".modal-form").appendChild(addProjectSubmit);
        }

        function createEditProjectSubmit() {
            const editProjectSubmit = document.createElement("button");
            editProjectSubmit.classList.add("button", "outline-secondary-button");
            editProjectSubmit.textContent = "Edit project";
            editProjectSubmit.type = "submit";
            editProjectSubmit.id = "edit-project-submit";
            modalBackground.querySelector(".modal-form").appendChild(editProjectSubmit);
        }

        function editModalTitle(title) {
            const modalTitle = document.querySelector(".modal-title");
            modalTitle.textContent = title;
        }

        addProjectButton.addEventListener("click", () => {
            nameProjectInput.value = "";
            descriptionProjectInput.value = "";
            typeProjectInput.value = "";
            modalBackground.classList.remove("hidden");
            removeModalButtons()
            createAddProjectSubmit();    
            editModalTitle("Add Project");     
        })
        modalBackground.addEventListener("click", (event) => {
            if(event.target.classList.contains("modal-background-opacity") || event.target.closest(".modal-close-button")) {
                modalBackground.classList.add("hidden");
            }
        })

        document.addEventListener("click", (event) => {
            if(event.target.closest(".project-delete")) {
                console.log("BUTTON");
                const projectId = event.target.closest('[id]').id;
                console.log(projectId);
                fetch(`/api/projects/${projectId}`, {
                    method: "DELETE"
                }).then(() => {
                    window.location.reload();
                })
            }
            if(event.target.closest(".project-preview-state")) {
                const projectId = event.target.closest('[id]').id;
                fetch(`/api/projects/${projectId}`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        state: -1
                    })
                }).then(() => {
                    window.location.reload();
                })
            }
            if(event.target.closest(".project-next-state")) {
                const projectId = event.target.closest('[id]').id;
                fetch(`/api/projects/${projectId}`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        state: 1
                    })
                }).then(() => {
                    window.location.reload();
                })
            }
            if(event.target.closest(".project-edit-button")) {
                const projectId = event.target.closest('[id]').id;
                removeModalButtons()
                modalBackground.classList.remove("hidden");
                createEditProjectSubmit();
                editModalTitle("Edit Project");
                fetch(`/api/projects/${projectId}`)
                    .then(response => response.json())
                    .then(project => {
                        nameProjectInput.value = project.name;
                        descriptionProjectInput.value = project.description;
                        typeProjectInput.value = project.type;
                        projectToEdit = project;
                    })
            }
            
        })

        document.addEventListener("submit", (event) => {
            event.preventDefault();
            const form = event.target;
            const button = event.target.querySelector('button');
            if (button.id === "add-project-submit") {
                const formData = new FormData(form);
                const name = formData.get("project-name");
                const description = formData.get("project-description");
                const type = formData.get("project-type");
                if(!name || !description || !type) return alert("Please fill all the fields");
                fetch("/api/projects", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        name,
                        description,
                        type,
                        state: 0
                    })
                }).then(() => {
                    window.location.reload();
                })
            }
            if (button.id === "edit-project-submit") {
                const button = event.target.querySelector('button');
                const formData = new FormData(form);
                const name = formData.get("project-name");
                const description = formData.get("project-description");
                const type = formData.get("project-type");
                if(!name || !description || !type) return alert("Please fill all the fields");
                const projectId = form.closest(".modal-container").querySelector('[id]').id;
                fetch(`/api/projects/`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        name,
                        description,
                        type,
                        state: projectToEdit.state,
                        id: projectToEdit.id
                    })
                }).then(() => {
                    window.location.reload();
                })
            }
            if(form.id === "login-form") {
                const formData = new FormData(form);
                const password = formData.get("login");
                fetch("/api/login", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    credentials: "include",
                    body: JSON.stringify({
                        password
                    })
                })
                .then(response => {
                    if(response.status === 400) return createError("Invalid password", 400);
                    if(response.status === 401) return createError("Unauthorized", 401);
                    if(response.status === 500) return createError("Server error", 500);
                    if(response.status === 200) return window.location.reload();
                })
            }
        })

        
   </script>
</body>
</html>
